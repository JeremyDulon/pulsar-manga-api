# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    uploads_directory: '%kernel.project_dir%/public/uploads' # TODO: Nettoyer ?
    chapter_pages_directory: 'chapter_pages' # TODO: Nettoyer ?
    chapter_pages_path: '%uploads_directory%/%chapter_pages_directory%' # TODO: Nettoyer ?
    mangas_directory: 'mangas' # TODO: Nettoyer ?
    mangas_path: '%uploads_directory%/%mangas_directory%' # TODO: Nettoyer ?
    host_url: '%env(resolve:HOST_URL)%'
    aws_s3_url: '%env(resolve:AWS_S3_URL)%'
    save_on_filesystem: true # True pour stocker sur AWS S3 ou Local / False pour utiliser la vraie url
    user_agent: 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.88 Safari/537.36'


services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        bind:
            $env: '%kernel.environment%'
    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
            - '../src/Tests/'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller/'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    gedmo.listener.timestampable:
        class: Gedmo\Timestampable\TimestampableListener
        tags:
            - { name: doctrine.event_subscriber, connection: default }
        calls:
            - [ setAnnotationReader, [ "@annotation_reader" ] ]

    App\EventListener\UrlFileListener:
        tags:
            - { name: doctrine.orm.entity_listener, event: 'postLoad', entity: 'App\Entity\File' }

    storage.aws_s3.client:
        class: Aws\S3\S3Client
        #factory_class: Aws\S3\S3Client
        arguments:
            -   version: 'latest'
                region: '%env(resolve:AWS_S3_REGION)%'
                credentials:
                    key: '%env(resolve:AWS_S3_ACCESS_KEY)%'
                    secret: '%env(resolve:AWS_S3_SECRET)%'

    Gaufrette\Filesystem: '@gaufrette.pulsar_local_storage_filesystem'

    gedmo.listener.sluggable:
        class: Gedmo\Sluggable\SluggableListener
        tags:
            - { name: doctrine.event_subscriber, connection: default }
        calls:
            - [ setAnnotationReader, [ "@annotation_reader" ] ]


    App\EventListener\FileDeletedCleaner:
        tags:
            - { name: 'doctrine.orm.entity_listener', event: 'preRemove', entity: 'App\Entity\File' }
